data = {
    "Fundamentos de Ciencia de Datos": [
        "Data Cleaning", "Data Transformation", "Data Wrangling",
        "Feature Engineering", "Exploratory Data Analysis (EDA)",
        "Data Visualization", "Missing Data Imputation", "Outlier Detection",
        "Statistical Analysis"
    ],
    "Machine Learning": [
        "Supervised Learning", "Linear Regression", "Logistic Regression",
        "Decision Trees", "Random Forests", "Gradient Boosting (e.g., XGBoost, LightGBM)",
        "Support Vector Machines (SVM)", "K-Nearest Neighbors (KNN)",
        "Ensemble Learning", "Unsupervised Learning", "Clustering", "K-Means",
        "Hierarchical Clustering", "DBSCAN", "Dimensionality Reduction",
        "Principal Component Analysis (PCA)", "t-SNE", "Autoencoders",
        "Model Evaluation", "Cross-Validation", "Confusion Matrix",
        "Precision & Recall", "F1 Score", "ROC & AUC", "Mean Squared Error (MSE)",
        "R-Squared"
    ],
    "Deep Learning": [
        "Neural Networks", "Convolutional Neural Networks (CNNs)",
        "Recurrent Neural Networks (RNNs)", "Long Short-Term Memory (LSTM)",
        "Transformers", "Autoencoders", "GANs (Generative Adversarial Networks)",
        "Deep Reinforcement Learning", "Transfer Learning"
    ],
    "Natural Language Processing (NLP)": [
        "Text Classification", "Sentiment Analysis", "Named Entity Recognition (NER)",
        "Text Generation", "Word Embeddings", "Topic Modeling", "Bag-of-Words",
        "TF-IDF", "Language Models (e.g., GPT, BERT, T5)"
    ],
    "Computer Vision": [
        "Image Classification", "Object Detection", "Semantic Segmentation",
        "Instance Segmentation", "Optical Character Recognition (OCR)",
        "Image Generation", "Image Augmentation", "Style Transfer"
    ],
    "Time Series Analysis": [
        "Forecasting", "Anomaly Detection", "ARIMA", "Exponential Smoothing",
        "LSTMs for Time Series", "Seasonality and Trends", "Rolling Statistics",
        "Dynamic Time Warping"
    ],
    "Reinforcement Learning": [
        "Q-Learning", "Deep Q-Networks (DQN)", "Policy Gradient Methods",
        "Markov Decision Processes (MDPs)", "Multi-Armed Bandits",
        "Game Theory", "Monte Carlo Methods"
    ],
    "Optimization Problems": [
        "Gradient Descent", "Convex Optimization", "Linear Programming",
        "Integer Programming", "Evolutionary Algorithms", "Genetic Algorithms",
        "Simulated Annealing"
    ],
    "Big Data & Distributed Computing": [
        "Hadoop", "Spark", "MapReduce", "Parallel Processing", "Data Pipelines",
        "Data Partitioning", "Distributed Machine Learning", "Feature Scaling for Big Data"
    ],
    "Tools & Libraries": [
        "NumPy", "pandas", "matplotlib", "seaborn", "scikit-learn", "TensorFlow",
        "PyTorch", "Keras", "OpenCV", "NLTK", "spaCy", "Hugging Face", "Dask"
    ],
    "Applications": [
        "Fraud Detection", "Recommender Systems", "Autonomous Driving", "Chatbots",
        "Medical Diagnosis", "Climate Modeling", "Predictive Maintenance",
        "Sentiment Analysis", "Stock Price Prediction"
    ],
    "Mathematics & Statistics": [
        "Probability", "Bayes Theorem", "Hypothesis Testing", "Linear Algebra",
        "Matrix Factorization", "Calculus", "Optimization", "Information Theory"
    ],
    "Data Engineering": [
        "ETL Processes", "Data Storage", "Data Lakes", "Data Warehousing",
        "SQL Optimization", "Real-Time Data Processing", "Data Governance"
    ],
    "Ethics & Fairness in AI": [
        "Bias Detection", "Explainable AI", "Fairness in Algorithms",
        "Model Interpretability", "Data Privacy", "Adversarial Attacks"
    ],
    "Specialized Domains": [
        "Healthcare", "Disease Prediction", "Medical Image Analysis",
        "Genomics Data", "Drug Discovery", "Finance", "Credit Scoring",
        "Portfolio Optimization", "Risk Management", "Retail", "Demand Forecasting",
        "Customer Segmentation", "Dynamic Pricing", "Energy", "Load Forecasting",
        "Renewable Energy Optimization", "Smart Grids", "Agriculture",
        "Crop Yield Prediction", "Pest Detection", "Precision Farming"
    ]
}

# Esqueleto para crear problemas en Django

from tags.models import Tag, Category
from problems.models import Problem, Example
from testcases.models import TestCase

# Crear o buscar la categor√≠a
category, _ = Category.objects.get_or_create(
    name="",
    defaults={"description": ""}
)

# Crear o buscar etiquetas
tag1, _ = Tag.objects.get_or_create(name="", category=category)
tag2, _ = Tag.objects.get_or_create(name="", category=category)

# Crear el problema
problem = Problem.objects.create(
    title="",
    description="",
    difficulty="",
    category=category,
    formula=""
)

# Agregar etiquetas al problema
problem.tags.add(tag1, tag2)

# Crear ejemplos relacionados
Example.objects.create(
    problem=problem,
    input_data="",
    output_data="",
    explanation=""
)

Example.objects.create(
    problem=problem,
    input_data="",
    output_data="",
    explanation=""
)

# Crear casos de prueba
TestCase.objects.create(
    problem=problem,
    input="",
    expected_output="",
    visibility=True
)

TestCase.objects.create(
    problem=problem,
    input="",
    expected_output="",
    visibility=False
)
